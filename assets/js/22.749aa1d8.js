(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{451:function(e,t,o){"use strict";o.r(t);var a=o(2),r=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"introduction"}},[t("a",{attrs:{href:"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Introduction"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("A Templating Language that "),t("strong",[e._v("defines AWS resources")]),e._v(" to be provisioned. "),t("strong",[e._v("Automating")]),e._v(" the creation of resources via code.")]),e._v(" "),t("p",[t("strong",[e._v("Infrastructure as Code")])]),e._v(" "),t("h3",{attrs:{id:"what-is-infrastructure-as-code-iac"}},[e._v("What is Infrastructure As Code(IaC)")]),e._v(" "),t("p",[e._v("The process of managing and provisioning computer data centers(eg. AWS) through machine-readable definition files(eg. YAML, JSON files) rather than physical hardware configuration or interactive configuration tools. (stop doing manual configuartion!)")]),e._v(" "),t("h3",{attrs:{id:"use-case"}},[e._v("Use Case")]),e._v(" "),t("p",[e._v("People pay a monthly subscription and we run a Minecraft server. They choose "),t("strong",[e._v("where")]),e._v(" they want to and "),t("strong",[e._v("what size")]),e._v(" of server they want to run.")]),e._v(" "),t("p",[e._v("We can use their "),t("strong",[e._v("inputs")]),e._v(" and use an AWS Lambda to create a new CloudFormation stack. We have a lambda send them the email of their new Minecraft Server IP address and details.")]),e._v(" "),t("h2",{attrs:{id:"cheat-sheet"}},[e._v("Cheat Sheet")]),e._v(" "),t("ul",[t("li",[e._v("When being asked to "),t("strong",[e._v("automate")]),e._v(" the provisioning of resources think CloudFormation.")]),e._v(" "),t("li",[e._v("When Infrastructure as Code(IaC) is mentioned, think CloudFormation.")]),e._v(" "),t("li",[e._v("CloudFormation can be written in either JSON or YAML.")]),e._v(" "),t("li",[e._v("When CloudFormation encounters an error, it will rollback with "),t("strong",[e._v("ROLLBACK_IN_PROGRESS")]),e._v(".")]),e._v(" "),t("li",[e._v("CloudFormation templates larger than 51,200 bytes(0.05M) are too large to upload directly, and must be imported into CloudFormation via an S3 bucket.")]),e._v(" "),t("li",[t("strong",[e._v("NestedStacks")]),e._v(" helps you break up your CloudFormation template smaller reusable templates that can be composed into large templates.")]),e._v(" "),t("li",[t("strong",[e._v("At least one resource")]),e._v(" under resources\n"),t("ul",[t("li",[e._v("must be defined for a CloudFormation template to be valid.")])])]),e._v(" "),t("li",[t("strong",[e._v("MetaData")]),e._v(" extra information about your template.")]),e._v(" "),t("li",[t("strong",[e._v("Description")]),e._v(" a description of what the template is suppose to do.")]),e._v(" "),t("li",[t("strong",[e._v("Parameters")]),e._v(" is how you get user inputs into templates.")]),e._v(" "),t("li",[t("strong",[e._v("Transofrms")]),e._v(" applies marcos(like applying a mod which change the anatomy to be custom)")]),e._v(" "),t("li",[t("strong",[e._v("Outputs")]),e._v(" are values you can use to import into other stacks.")]),e._v(" "),t("li",[t("strong",[e._v("Mappings")]),e._v(" maps keys to values, just like a lookup table.")]),e._v(" "),t("li",[t("strong",[e._v("Resources")]),e._v(" defines the resources you want to provision, "),t("strong",[e._v("at least one resource is required")]),e._v("(others are optional).")]),e._v(" "),t("li",[t("strong",[e._v("Conditions")]),e._v(" are whether resources are created or properties are assigned.")])])])}),[],!1,null,null,null);t.default=r.exports}}]);